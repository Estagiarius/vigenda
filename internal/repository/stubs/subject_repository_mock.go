// Code generated by MockGen. DO NOT EDIT.
// Source: subject_repo.go
//
// Generated by this command:
//
//	mockgen -source=subject_repo.go -destination=stubs/subject_repository_mock.go -package=stubs SubjectRepository
//

// Package stubs is a generated GoMock package.
package stubs

import (
	context "context"
	reflect "reflect"
	models "vigenda/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockSubjectRepository is a mock of SubjectRepository interface.
type MockSubjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectRepositoryMockRecorder
	isgomock struct{}
}

// MockSubjectRepositoryMockRecorder is the mock recorder for MockSubjectRepository.
type MockSubjectRepositoryMockRecorder struct {
	mock *MockSubjectRepository
}

// NewMockSubjectRepository creates a new mock instance.
func NewMockSubjectRepository(ctrl *gomock.Controller) *MockSubjectRepository {
	mock := &MockSubjectRepository{ctrl: ctrl}
	mock.recorder = &MockSubjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectRepository) EXPECT() *MockSubjectRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSubjectRepository) Create(ctx context.Context, subject *models.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSubjectRepositoryMockRecorder) Create(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSubjectRepository)(nil).Create), ctx, subject)
}

// Delete mocks base method.
func (m *MockSubjectRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSubjectRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSubjectRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockSubjectRepository) GetByID(ctx context.Context, id int64) (*models.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSubjectRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSubjectRepository)(nil).GetByID), ctx, id)
}

// GetByUserID mocks base method.
func (m *MockSubjectRepository) GetByUserID(ctx context.Context, userID int64) ([]models.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]models.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSubjectRepositoryMockRecorder) GetByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSubjectRepository)(nil).GetByUserID), ctx, userID)
}

// GetOrCreateByNameAndUser mocks base method.
func (m *MockSubjectRepository) GetOrCreateByNameAndUser(ctx context.Context, name string, userID int64) (models.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateByNameAndUser", ctx, name, userID)
	ret0, _ := ret[0].(models.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateByNameAndUser indicates an expected call of GetOrCreateByNameAndUser.
func (mr *MockSubjectRepositoryMockRecorder) GetOrCreateByNameAndUser(ctx, name, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateByNameAndUser", reflect.TypeOf((*MockSubjectRepository)(nil).GetOrCreateByNameAndUser), ctx, name, userID)
}

// Update mocks base method.
func (m *MockSubjectRepository) Update(ctx context.Context, subject *models.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSubjectRepositoryMockRecorder) Update(ctx, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSubjectRepository)(nil).Update), ctx, subject)
}
