// Code generated by MockGen. DO NOT EDIT.
// Source: question_repo.go
//
// Generated by this command:
//
//	mockgen -source=question_repo.go -destination=stubs/question_repository_mock.go -package=stubs QuestionRepository
//

// Package stubs is a generated GoMock package.
package stubs

import (
	context "context"
	reflect "reflect"
	models "vigenda/internal/models"
	repository "vigenda/internal/repository"

	gomock "go.uber.org/mock/gomock"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
	isgomock struct{}
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method.
func (m *MockQuestionRepository) AddQuestion(ctx context.Context, question *models.Question) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", ctx, question)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionRepositoryMockRecorder) AddQuestion(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).AddQuestion), ctx, question)
}

// GetQuestionsByCriteria mocks base method.
func (m *MockQuestionRepository) GetQuestionsByCriteria(ctx context.Context, criteria repository.QuestionQueryCriteria) ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByCriteria", ctx, criteria)
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByCriteria indicates an expected call of GetQuestionsByCriteria.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestionsByCriteria(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByCriteria", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestionsByCriteria), ctx, criteria)
}

// GetQuestionsByCriteriaProofGeneration mocks base method.
func (m *MockQuestionRepository) GetQuestionsByCriteriaProofGeneration(ctx context.Context, criteria repository.ProofCriteria) ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByCriteriaProofGeneration", ctx, criteria)
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByCriteriaProofGeneration indicates an expected call of GetQuestionsByCriteriaProofGeneration.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestionsByCriteriaProofGeneration(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByCriteriaProofGeneration", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestionsByCriteriaProofGeneration), ctx, criteria)
}
