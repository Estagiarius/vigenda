// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repository.go -destination=internal/repository/stubs/class_repository_mock.go -package=stubs ClassRepository
//

// Package stubs is a generated GoMock package.
package stubs

import (
	context "context"
	reflect "reflect"
	models "vigenda/internal/models"
	repository "vigenda/internal/repository"

	gomock "go.uber.org/mock/gomock"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
	isgomock struct{}
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// AddQuestion mocks base method.
func (m *MockQuestionRepository) AddQuestion(ctx context.Context, question *models.Question) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuestion", ctx, question)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuestion indicates an expected call of AddQuestion.
func (mr *MockQuestionRepositoryMockRecorder) AddQuestion(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).AddQuestion), ctx, question)
}

// GetQuestionsByCriteria mocks base method.
func (m *MockQuestionRepository) GetQuestionsByCriteria(ctx context.Context, criteria repository.QuestionQueryCriteria) ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByCriteria", ctx, criteria)
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByCriteria indicates an expected call of GetQuestionsByCriteria.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestionsByCriteria(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByCriteria", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestionsByCriteria), ctx, criteria)
}

// GetQuestionsByCriteriaProofGeneration mocks base method.
func (m *MockQuestionRepository) GetQuestionsByCriteriaProofGeneration(ctx context.Context, criteria repository.ProofCriteria) ([]models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByCriteriaProofGeneration", ctx, criteria)
	ret0, _ := ret[0].([]models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByCriteriaProofGeneration indicates an expected call of GetQuestionsByCriteriaProofGeneration.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestionsByCriteriaProofGeneration(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByCriteriaProofGeneration", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestionsByCriteriaProofGeneration), ctx, criteria)
}

// MockSubjectRepository is a mock of SubjectRepository interface.
type MockSubjectRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubjectRepositoryMockRecorder
	isgomock struct{}
}

// MockSubjectRepositoryMockRecorder is the mock recorder for MockSubjectRepository.
type MockSubjectRepositoryMockRecorder struct {
	mock *MockSubjectRepository
}

// NewMockSubjectRepository creates a new mock instance.
func NewMockSubjectRepository(ctrl *gomock.Controller) *MockSubjectRepository {
	mock := &MockSubjectRepository{ctrl: ctrl}
	mock.recorder = &MockSubjectRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubjectRepository) EXPECT() *MockSubjectRepositoryMockRecorder {
	return m.recorder
}

// GetOrCreateByNameAndUser mocks base method.
func (m *MockSubjectRepository) GetOrCreateByNameAndUser(ctx context.Context, name string, userID int64) (models.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateByNameAndUser", ctx, name, userID)
	ret0, _ := ret[0].(models.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateByNameAndUser indicates an expected call of GetOrCreateByNameAndUser.
func (mr *MockSubjectRepositoryMockRecorder) GetOrCreateByNameAndUser(ctx, name, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateByNameAndUser", reflect.TypeOf((*MockSubjectRepository)(nil).GetOrCreateByNameAndUser), ctx, name, userID)
}

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CreateTask mocks base method.
func (m *MockTaskRepository) CreateTask(ctx context.Context, task *models.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryMockRecorder) CreateTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepository)(nil).CreateTask), ctx, task)
}

// DeleteTask mocks base method.
func (m *MockTaskRepository) DeleteTask(ctx context.Context, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryMockRecorder) DeleteTask(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepository)(nil).DeleteTask), ctx, taskID)
}

// GetAllTasks mocks base method.
func (m *MockTaskRepository) GetAllTasks(ctx context.Context) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", ctx)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTaskRepositoryMockRecorder) GetAllTasks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTaskRepository)(nil).GetAllTasks), ctx)
}

// GetTaskByID mocks base method.
func (m *MockTaskRepository) GetTaskByID(ctx context.Context, id int64) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", ctx, id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskRepositoryMockRecorder) GetTaskByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskRepository)(nil).GetTaskByID), ctx, id)
}

// GetTasksByClassID mocks base method.
func (m *MockTaskRepository) GetTasksByClassID(ctx context.Context, classID int64) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByClassID", ctx, classID)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByClassID indicates an expected call of GetTasksByClassID.
func (mr *MockTaskRepositoryMockRecorder) GetTasksByClassID(ctx, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByClassID", reflect.TypeOf((*MockTaskRepository)(nil).GetTasksByClassID), ctx, classID)
}

// MarkTaskCompleted mocks base method.
func (m *MockTaskRepository) MarkTaskCompleted(ctx context.Context, taskID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkTaskCompleted", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkTaskCompleted indicates an expected call of MarkTaskCompleted.
func (mr *MockTaskRepositoryMockRecorder) MarkTaskCompleted(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTaskCompleted", reflect.TypeOf((*MockTaskRepository)(nil).MarkTaskCompleted), ctx, taskID)
}

// UpdateTask mocks base method.
func (m *MockTaskRepository) UpdateTask(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryMockRecorder) UpdateTask(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTask), ctx, task)
}

// MockClassRepository is a mock of ClassRepository interface.
type MockClassRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClassRepositoryMockRecorder
	isgomock struct{}
}

// MockClassRepositoryMockRecorder is the mock recorder for MockClassRepository.
type MockClassRepositoryMockRecorder struct {
	mock *MockClassRepository
}

// NewMockClassRepository creates a new mock instance.
func NewMockClassRepository(ctrl *gomock.Controller) *MockClassRepository {
	mock := &MockClassRepository{ctrl: ctrl}
	mock.recorder = &MockClassRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassRepository) EXPECT() *MockClassRepositoryMockRecorder {
	return m.recorder
}

// AddStudent mocks base method.
func (m *MockClassRepository) AddStudent(ctx context.Context, student *models.Student) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudent", ctx, student)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStudent indicates an expected call of AddStudent.
func (mr *MockClassRepositoryMockRecorder) AddStudent(ctx, student any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudent", reflect.TypeOf((*MockClassRepository)(nil).AddStudent), ctx, student)
}

// CreateClass mocks base method.
func (m *MockClassRepository) CreateClass(ctx context.Context, class *models.Class) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClass", ctx, class)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClass indicates an expected call of CreateClass.
func (mr *MockClassRepositoryMockRecorder) CreateClass(ctx, class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClass", reflect.TypeOf((*MockClassRepository)(nil).CreateClass), ctx, class)
}

// DeleteClass mocks base method.
func (m *MockClassRepository) DeleteClass(ctx context.Context, classID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClass", ctx, classID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass.
func (mr *MockClassRepositoryMockRecorder) DeleteClass(ctx, classID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassRepository)(nil).DeleteClass), ctx, classID, userID)
}

// DeleteStudent mocks base method.
func (m *MockClassRepository) DeleteStudent(ctx context.Context, studentID, classID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent", ctx, studentID, classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockClassRepositoryMockRecorder) DeleteStudent(ctx, studentID, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockClassRepository)(nil).DeleteStudent), ctx, studentID, classID)
}

// GetClassByID mocks base method.
func (m *MockClassRepository) GetClassByID(ctx context.Context, id int64) (*models.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassByID", ctx, id)
	ret0, _ := ret[0].(*models.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassByID indicates an expected call of GetClassByID.
func (mr *MockClassRepositoryMockRecorder) GetClassByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassByID", reflect.TypeOf((*MockClassRepository)(nil).GetClassByID), ctx, id)
}

// GetStudentByID mocks base method.
func (m *MockClassRepository) GetStudentByID(ctx context.Context, studentID int64) (*models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByID", ctx, studentID)
	ret0, _ := ret[0].(*models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByID indicates an expected call of GetStudentByID.
func (mr *MockClassRepositoryMockRecorder) GetStudentByID(ctx, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByID", reflect.TypeOf((*MockClassRepository)(nil).GetStudentByID), ctx, studentID)
}

// GetStudentsByClassID mocks base method.
func (m *MockClassRepository) GetStudentsByClassID(ctx context.Context, classID int64) ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsByClassID", ctx, classID)
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsByClassID indicates an expected call of GetStudentsByClassID.
func (mr *MockClassRepositoryMockRecorder) GetStudentsByClassID(ctx, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsByClassID", reflect.TypeOf((*MockClassRepository)(nil).GetStudentsByClassID), ctx, classID)
}

// ListAllClasses mocks base method.
func (m *MockClassRepository) ListAllClasses(ctx context.Context) ([]models.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllClasses", ctx)
	ret0, _ := ret[0].([]models.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClasses indicates an expected call of ListAllClasses.
func (mr *MockClassRepositoryMockRecorder) ListAllClasses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClasses", reflect.TypeOf((*MockClassRepository)(nil).ListAllClasses), ctx)
}

// UpdateClass mocks base method.
func (m *MockClassRepository) UpdateClass(ctx context.Context, class *models.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, class)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassRepositoryMockRecorder) UpdateClass(ctx, class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassRepository)(nil).UpdateClass), ctx, class)
}

// UpdateStudent mocks base method.
func (m *MockClassRepository) UpdateStudent(ctx context.Context, student *models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockClassRepositoryMockRecorder) UpdateStudent(ctx, student any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockClassRepository)(nil).UpdateStudent), ctx, student)
}

// UpdateStudentStatus mocks base method.
func (m *MockClassRepository) UpdateStudentStatus(ctx context.Context, studentID int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudentStatus", ctx, studentID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudentStatus indicates an expected call of UpdateStudentStatus.
func (mr *MockClassRepositoryMockRecorder) UpdateStudentStatus(ctx, studentID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentStatus", reflect.TypeOf((*MockClassRepository)(nil).UpdateStudentStatus), ctx, studentID, status)
}

// MockAssessmentRepository is a mock of AssessmentRepository interface.
type MockAssessmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAssessmentRepositoryMockRecorder
	isgomock struct{}
}

// MockAssessmentRepositoryMockRecorder is the mock recorder for MockAssessmentRepository.
type MockAssessmentRepositoryMockRecorder struct {
	mock *MockAssessmentRepository
}

// NewMockAssessmentRepository creates a new mock instance.
func NewMockAssessmentRepository(ctrl *gomock.Controller) *MockAssessmentRepository {
	mock := &MockAssessmentRepository{ctrl: ctrl}
	mock.recorder = &MockAssessmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssessmentRepository) EXPECT() *MockAssessmentRepositoryMockRecorder {
	return m.recorder
}

// CreateAssessment mocks base method.
func (m *MockAssessmentRepository) CreateAssessment(ctx context.Context, assessment *models.Assessment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssessment", ctx, assessment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssessment indicates an expected call of CreateAssessment.
func (mr *MockAssessmentRepositoryMockRecorder) CreateAssessment(ctx, assessment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssessment", reflect.TypeOf((*MockAssessmentRepository)(nil).CreateAssessment), ctx, assessment)
}

// EnterGrade mocks base method.
func (m *MockAssessmentRepository) EnterGrade(ctx context.Context, grade *models.Grade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterGrade", ctx, grade)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterGrade indicates an expected call of EnterGrade.
func (mr *MockAssessmentRepositoryMockRecorder) EnterGrade(ctx, grade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterGrade", reflect.TypeOf((*MockAssessmentRepository)(nil).EnterGrade), ctx, grade)
}

// GetAssessmentByID mocks base method.
func (m *MockAssessmentRepository) GetAssessmentByID(ctx context.Context, assessmentID int64) (*models.Assessment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssessmentByID", ctx, assessmentID)
	ret0, _ := ret[0].(*models.Assessment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssessmentByID indicates an expected call of GetAssessmentByID.
func (mr *MockAssessmentRepositoryMockRecorder) GetAssessmentByID(ctx, assessmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssessmentByID", reflect.TypeOf((*MockAssessmentRepository)(nil).GetAssessmentByID), ctx, assessmentID)
}

// GetGradesByClassID mocks base method.
func (m *MockAssessmentRepository) GetGradesByClassID(ctx context.Context, classID int64) ([]models.Grade, []models.Assessment, []models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradesByClassID", ctx, classID)
	ret0, _ := ret[0].([]models.Grade)
	ret1, _ := ret[1].([]models.Assessment)
	ret2, _ := ret[2].([]models.Student)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetGradesByClassID indicates an expected call of GetGradesByClassID.
func (mr *MockAssessmentRepositoryMockRecorder) GetGradesByClassID(ctx, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradesByClassID", reflect.TypeOf((*MockAssessmentRepository)(nil).GetGradesByClassID), ctx, classID)
}

// ListAllAssessments mocks base method.
func (m *MockAssessmentRepository) ListAllAssessments(ctx context.Context) ([]models.Assessment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAssessments", ctx)
	ret0, _ := ret[0].([]models.Assessment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAssessments indicates an expected call of ListAllAssessments.
func (mr *MockAssessmentRepositoryMockRecorder) ListAllAssessments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAssessments", reflect.TypeOf((*MockAssessmentRepository)(nil).ListAllAssessments), ctx)
}
