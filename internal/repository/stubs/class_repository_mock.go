// Code generated by MockGen. DO NOT EDIT.
// Source: class_repo.go
//
// Generated by this command:
//
//	mockgen -source=class_repo.go -destination=stubs/class_repository_mock.go -package=stubs ClassRepository
//

// Package stubs is a generated GoMock package.
package stubs

import (
	context "context"
	reflect "reflect"
	models "vigenda/internal/models"

	gomock "go.uber.org/mock/gomock"
)

// MockClassRepository is a mock of ClassRepository interface.
type MockClassRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClassRepositoryMockRecorder
	isgomock struct{}
}

// MockClassRepositoryMockRecorder is the mock recorder for MockClassRepository.
type MockClassRepositoryMockRecorder struct {
	mock *MockClassRepository
}

// NewMockClassRepository creates a new mock instance.
func NewMockClassRepository(ctrl *gomock.Controller) *MockClassRepository {
	mock := &MockClassRepository{ctrl: ctrl}
	mock.recorder = &MockClassRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassRepository) EXPECT() *MockClassRepositoryMockRecorder {
	return m.recorder
}

// AddStudent mocks base method.
func (m *MockClassRepository) AddStudent(ctx context.Context, student *models.Student) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStudent", ctx, student)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddStudent indicates an expected call of AddStudent.
func (mr *MockClassRepositoryMockRecorder) AddStudent(ctx, student any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStudent", reflect.TypeOf((*MockClassRepository)(nil).AddStudent), ctx, student)
}

// CreateClass mocks base method.
func (m *MockClassRepository) CreateClass(ctx context.Context, class *models.Class) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClass", ctx, class)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClass indicates an expected call of CreateClass.
func (mr *MockClassRepositoryMockRecorder) CreateClass(ctx, class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClass", reflect.TypeOf((*MockClassRepository)(nil).CreateClass), ctx, class)
}

// DeleteClass mocks base method.
func (m *MockClassRepository) DeleteClass(ctx context.Context, classID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClass", ctx, classID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClass indicates an expected call of DeleteClass.
func (mr *MockClassRepositoryMockRecorder) DeleteClass(ctx, classID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClass", reflect.TypeOf((*MockClassRepository)(nil).DeleteClass), ctx, classID, userID)
}

// DeleteStudent mocks base method.
func (m *MockClassRepository) DeleteStudent(ctx context.Context, studentID, classID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudent", ctx, studentID, classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudent indicates an expected call of DeleteStudent.
func (mr *MockClassRepositoryMockRecorder) DeleteStudent(ctx, studentID, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudent", reflect.TypeOf((*MockClassRepository)(nil).DeleteStudent), ctx, studentID, classID)
}

// GetClassByID mocks base method.
func (m *MockClassRepository) GetClassByID(ctx context.Context, id int64) (*models.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassByID", ctx, id)
	ret0, _ := ret[0].(*models.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassByID indicates an expected call of GetClassByID.
func (mr *MockClassRepositoryMockRecorder) GetClassByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassByID", reflect.TypeOf((*MockClassRepository)(nil).GetClassByID), ctx, id)
}

// GetStudentByID mocks base method.
func (m *MockClassRepository) GetStudentByID(ctx context.Context, studentID int64) (*models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByID", ctx, studentID)
	ret0, _ := ret[0].(*models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByID indicates an expected call of GetStudentByID.
func (mr *MockClassRepositoryMockRecorder) GetStudentByID(ctx, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByID", reflect.TypeOf((*MockClassRepository)(nil).GetStudentByID), ctx, studentID)
}

// GetStudentsByClassID mocks base method.
func (m *MockClassRepository) GetStudentsByClassID(ctx context.Context, classID int64) ([]models.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentsByClassID", ctx, classID)
	ret0, _ := ret[0].([]models.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentsByClassID indicates an expected call of GetStudentsByClassID.
func (mr *MockClassRepositoryMockRecorder) GetStudentsByClassID(ctx, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentsByClassID", reflect.TypeOf((*MockClassRepository)(nil).GetStudentsByClassID), ctx, classID)
}

// ListAllClasses mocks base method.
func (m *MockClassRepository) ListAllClasses(ctx context.Context) ([]models.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllClasses", ctx)
	ret0, _ := ret[0].([]models.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClasses indicates an expected call of ListAllClasses.
func (mr *MockClassRepositoryMockRecorder) ListAllClasses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClasses", reflect.TypeOf((*MockClassRepository)(nil).ListAllClasses), ctx)
}

// UpdateClass mocks base method.
func (m *MockClassRepository) UpdateClass(ctx context.Context, class *models.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClass", ctx, class)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClass indicates an expected call of UpdateClass.
func (mr *MockClassRepositoryMockRecorder) UpdateClass(ctx, class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClass", reflect.TypeOf((*MockClassRepository)(nil).UpdateClass), ctx, class)
}

// UpdateStudent mocks base method.
func (m *MockClassRepository) UpdateStudent(ctx context.Context, student *models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudent", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudent indicates an expected call of UpdateStudent.
func (mr *MockClassRepositoryMockRecorder) UpdateStudent(ctx, student any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudent", reflect.TypeOf((*MockClassRepository)(nil).UpdateStudent), ctx, student)
}

// UpdateStudentStatus mocks base method.
func (m *MockClassRepository) UpdateStudentStatus(ctx context.Context, studentID int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudentStatus", ctx, studentID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudentStatus indicates an expected call of UpdateStudentStatus.
func (mr *MockClassRepositoryMockRecorder) UpdateStudentStatus(ctx, studentID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentStatus", reflect.TypeOf((*MockClassRepository)(nil).UpdateStudentStatus), ctx, studentID, status)
}
